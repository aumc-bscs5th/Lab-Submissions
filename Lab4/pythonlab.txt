Python 3.6.3 (v3.6.3:2c5fed8, Oct  3 2017, 18:11:49) [MSC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> x=1
>>> type(x)
<class 'int'>
>>> x=1.0
>>> type(x)
<class 'float'>
>>> b1=True
>>> b2=False
>>> type(b1)
<class 'bool'>
>>> x= 1.0 - 1.0j
>>> type(x)
<class 'complex'>
>>> print(x)
(1-1j)
>>> print(dir(types))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'types' is not defined
>>> import(types)
  File "<stdin>", line 1
    import(types)
          ^
SyntaxError: invalid syntax
>>> import types
>>> print(dir(types))
['AsyncGeneratorType', 'BuiltinFunctionType', 'BuiltinMethodType', 'CodeType', 'CoroutineType', 'DynamicClassAttribute', 'FrameType', 'FunctionType', 'GeneratorType', 'GetSetDescriptorType', 'LambdaType', 'MappingProxyType', 'MemberDescriptorType', 'MethodType', 'ModuleType', 'SimpleNamespace', 'TracebackType', '_GeneratorWrapper', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_ag', '_calculate_meta', '_collections_abc', '_functools', 'coroutine', 'new_class', 'prepare_class']
>>> x=1.0
>>> type(x) is float
True
>>> type(x) is int
False
>>> isinstance(x, type(x))
True
>>> print(x, type(x))
1.0 <class 'float'>
>>> z=complex(x)
>>> print(z, type(z))
(1+0j) <class 'complex'>
>>> x=float(z)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can't convert complex to float
>>> y=bool(z.real)
>>> print(z.real, "->", y, type(y))
1.0 -> True <class 'bool'>
>>> y=bool(z.imag)
>>> print(z.imag, "->", y, type(y))
0.0 -> False <class 'bool'>
>>> 1+2,1-2,1*2,1/2
(3, -1, 2, 0.5)
>>> 1.0+2.0, 1.0-2.0, 1.0*2.0, 1.0/2.0
(3.0, -1.0, 2.0, 0.5)
>>> 3.0//2.0
1.0
>>> True and False
False
>>> not False
True
>>> True or False
True
>>> 2>1,2<1
(True, False)
>>> 2<2,2>2
(False, False)
>>> 2>=2, 2<=2
(True, True)
>>> [1,2]==[1,2]
True
>>> l1=l2=[1,2]
>>> l1 is l2
True
>>> name=input("What is your name? : ")
What is your name? :
>>> name=input("What is your name? : ")
What is your name? : Omer
>>> city=input("What city do you live in? : ")
What city do you live in? : Multan
>>> state=input("What state is that? : ")
What state is that? : Pakistan
>>> print("Hello there! It is so great to meet you, ")
Hello there! It is so great to meet you,
>>> print(name)
Omer
>>> print("from ", city)
from  Multan
>>> print(state)
Pakistan
>>> print(name,'from', city, state)
Omer from Multan Pakistan
>>> age = input("Pardon my rudeness, but how old are you?: ")
Pardon my rudeness, but how old are you?: 23
>>> age=int(age-(0.15*age))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can't multiply sequence by non-int of type 'float'
>>> print(age)
23
>>> type(age)
<class 'str'>
>>> age=int(age)
>>> age=(age-(age*0.15))
>>> age
19.55
>>> print("Wow! You look like you could be", int(age), "!!" )
Wow! You look like you could be 19 !!
>>> if 9>5:
...     print("Yes, 9 greater than 5")
...
Yes, 9 greater than 5
>>> if 9!=5:
...     print("Yes, 9 not equal to 5")
...
Yes, 9 not equal to 5
>>> if 9<5:
...     print("yes, p less than 5")
... else:
...     print("No, 9 is not less than 5")
...
No, 9 is not less than 5
>>> if not(10==4) and 9>5:
...     print("Yay, basic math competency achieved!")
... else:
...     print(":(")
...
Yay, basic math competency achieved!
>>> #traffic color light example
... light_color=input("What color is the traffic light? : ")
What color is the traffic light? : yellow
>>> if light_color=="red":
...     print("You should stop!")
... elif light_color=="yellow":
...     print("Go Ahead!")
... else:
...     print("What country are you in?? ")
...
Go Ahead!
>>> #program to code by oneself:
... name=input("Please enter your name: ")
Please enter your name: Omer Affan
>>> age=input("Please enter your age: ")
Please enter your age: 23
>>> age=int(age)
>>> newage=100-age
>>> newage=2017+newage
>>> print("You will turn 100 years old in the year", newage)
You will turn 100 years old in the year 2094