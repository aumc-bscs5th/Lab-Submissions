Python 3.6.3 (v3.6.3:2c5fed8, Oct  3 2017, 17:26:49) [MSC v.1900 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> x=1
>>> type(x)
<class 'int'>
>>> x=1.0
>>> type(x)
<class 'float'>
>>> b1= true
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'true' is not defined
>>> b1 = True
>>> b2 = False
>>> type(b1)
<class 'bool'>
>>> x=1.0-1.0j
>>> type(x)
<class 'complex'>
>>> print(x)
(1-1j)
>>> print(x.real, x.imag)
1.0 -1.0
>>> import types
>>> print(dir(types))
['AsyncGeneratorType', 'BuiltinFunctionType', 'BuiltinMethodType', 'CodeType', 'CoroutineType', 'DynamicClassAttribute', 'FrameType', 'FunctionType', 'GeneratorType', 'GetSetDescriptorType', 'LambdaType', 'MappingProxyType', 'MemberDescriptorType', 'MethodType', 'ModuleType', 'SimpleNamespace', 'TracebackType', '_GeneratorWrapper', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_ag', '_calculate_meta', '_collections_abc', '_functools', 'coroutine', 'new_class', 'prepare_class']
>>> x=1.0
>>> type(x) is float
True
>>> type(x) is int
False
>>> isinstance(x,float)
True
>>> x=1.5
>>> print(x,type(x))
1.5 <class 'float'>
>>> x=int(x0
... x=int(x)
  File "<stdin>", line 2
    x=int(x)
    ^
SyntaxError: invalid syntax
>>> x = int(x)
>>> print(x, type(x))
1 <class 'int'>
>>> z = complex(x)
>>> print(z,type(z))
(1+0j) <class 'complex'>
>>> x = float(z)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can't convert complex to float
>>> y = bool(z.real)
>>> print(z.real,"->",y,type(y))
1.0 -> True <class 'bool'>
>>> 1+2,1-2, 1*2, 1/2
(3, -1, 2, 0.5)
>>> 1.0+2.0, 1.0-2.0, 1.0*2.0, 1.0/2.0
(3.0, -1.0, 2.0, 0.5)
>>> 3.0//2.0
1.0
>>> 2**2
4
>>> True and False
False
>>> not False
True
>>> True or False
True
>>> 2> 1, 2< 1
(True, False)
>>> 2>2, 2<2
(False, False)
>>> 2>=2, 2<=2
(True, True)
>>> [1,2]==[1,2]
True
>>> l1 = l2 = [1,2]
>>> l1 is l2
True
>>> name = raw_input("What is your name? ")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'raw_input' is not defined
>>> city = raw_input("What city do you live in? ")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'raw_input' is not defined
>>> state = raw_input("What state is that in? ")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'raw_input' is not defined
>>> print "Hello there! It is so great to meet you,"
  File "<stdin>", line 1
    print "Hello there! It is so great to meet you,"
                                                   ^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print("Hello there! It is so great to meet you,")?
>>> # One way to do this is to print strings on separate lines
... print name
  File "<stdin>", line 2
    print name
             ^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print(name)?
>>> print "from"
  File "<stdin>", line 1
    print "from"
               ^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print("from")?
>>> print city
  File "<stdin>", line 1
    print city
             ^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print(city)?
>>> print state
  File "<stdin>", line 1
    print state
              ^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print(state)?
>>> # We can also "glue together" pieces of a string by adding commas
... # between them.
... print name, "from", city, state
  File "<stdin>", line 3
    print name, "from", city, state
             ^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print(name, "from", city, state)?
>>> # This doesn't work because raw_input returns a string
... #age = raw_input("Pardon my rudeness, but how old are you? ")
... #print "Wow! You look like you could be", age - (0.15*age), "!!"
... age = input("Pardon my rudeness, but how old are you? ")
Pardon my rudeness, but how old are you? # Notice that we can "glue together" two strings and one integer into
>>> # one giant string.
... print "Wow! You look like you could be", int(age - (0.15*age)), "!!"
  File "<stdin>", line 2
    print "Wow! You look like you could be", int(age - (0.15*age)), "!!"
                                          ^
SyntaxError: invalid syntax
>>> # int(argument) forces the argument to be an integer by rounding down.
... # So, int(5.1) = 5 and int(5.9) = 5
...
>>> x=Name
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'Name' is not defined
>>> x = Name
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'Name' is not defined
>>> x='Name'
>>> y='Age'
>>> print('Enter ur Name')
Enter ur Name
>>> Name= input()
Junaid
>>> print('Enter ur Age')
Enter ur Age
>>> 22
22
>>> Age= input()
22
>>> AgeRemaining= 100-y
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for -: 'int' and 'str'
>>> AgeRemaining = 100-Age
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for -: 'int' and 'str'
>>> print('AgeRemaining = 100 - ', str(Age))
AgeRemaining = 100 -  22
>>> print(AgeRemaining)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'AgeRemaining' is not defined
>>> print(AgeRemaining)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'AgeRemaining' is not defined
>>> ageLeft = 100 - 22
>>> print(ageleft)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'ageleft' is not defined
>>> print(ageLeft)
78
>>>